// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ws-requests.sql

package userdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const chanListByUserID = `-- name: ChanListByUserID :many
SELECT "channel"."id", "channel"."channel", "channel"."title", "channel"."default"
FROM "public"."channel"
JOIN "public"."user_channel" ON "user_channel"."chan_id" = "channel"."id"
WHERE "user_channel"."user_id"=$1
`

func (q *Queries) ChanListByUserID(ctx context.Context, userID pgtype.UUID) ([]Channel, error) {
	rows, err := q.db.Query(ctx, chanListByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.Channel,
			&i.Title,
			&i.Default,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :exec
INSERT INTO "public"."user"
("id", "username", "given_name", "family_name", "enabled")
VALUES($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	ID         pgtype.UUID
	Username   string
	GivenName  string
	FamilyName string
	Enabled    bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.GivenName,
		arg.FamilyName,
		arg.Enabled,
	)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT "id", "username", "given_name", "family_name", "enabled"
FROM "public"."user"
WHERE "id"=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.GivenName,
		&i.FamilyName,
		&i.Enabled,
	)
	return i, err
}

const userCanPublish = `-- name: UserCanPublish :one
SELECT count(*) FROM public.user u
			  JOIN public.user_channel uc ON u.id = uc.user_id
			  JOIN public.channel c ON uc.chan_id = c.id
 WHERE u.id = $1 AND c.channel = $2 AND uc.can_publish
`

type UserCanPublishParams struct {
	ID      pgtype.UUID
	Channel string
}

func (q *Queries) UserCanPublish(ctx context.Context, arg UserCanPublishParams) (int64, error) {
	row := q.db.QueryRow(ctx, userCanPublish, arg.ID, arg.Channel)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userCanSubscribe = `-- name: UserCanSubscribe :one
SELECT count(*) FROM public.user u
			  JOIN public.user_channel uc ON u.id = uc.user_id
			  JOIN public.channel c ON uc.chan_id = c.id
 WHERE u.id = $1 AND c.channel = $2
`

type UserCanSubscribeParams struct {
	ID      pgtype.UUID
	Channel string
}

func (q *Queries) UserCanSubscribe(ctx context.Context, arg UserCanSubscribeParams) (int64, error) {
	row := q.db.QueryRow(ctx, userCanSubscribe, arg.ID, arg.Channel)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const userListByChanID = `-- name: UserListByChanID :many
SELECT "user"."id", "user"."username", "user"."given_name", "user"."family_name", "user"."enabled"
FROM "public"."user"
JOIN "public"."user_channel" ON "user_channel"."user_id" = "user"."id"
WHERE "user_channel"."chan_id"=$1
`

func (q *Queries) UserListByChanID(ctx context.Context, chanID int64) ([]User, error) {
	rows, err := q.db.Query(ctx, userListByChanID, chanID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.GivenName,
			&i.FamilyName,
			&i.Enabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
